continue
page.save_and_open_page
page.save_and_open_screenshot
page.methods.sort
page
expect(page).to have_content(/.*#{txts[0]}.*/) 
txts = [I18n.t( 'devise.registrations.signed_up'), I18n.t( 'devise.registrations.signed_up_but_unconfirmed')]
click_button I18n.t('devise.button.sign_up')
fill_in I18n.t('simple_form.labels.user.password_confirmation'), with: confirmation, match: :prefer_exact
fill_in I18n.t('simple_form.labels.defaults.password'), with: password, match: :prefer_exact
fill_in I18n.t('simple_form.labels.defaults.name'), with: name, match: :prefer_exact
fill_in I18n.t('simple_form.labels.defaults.email'), with: email, match: :prefer_exact
confirmation == password
confirmation
comfirmation
password
email
name
continue
Accreditation.states[self.state]
self
self[:state].to_i
self[:state]
self[;state]
continue
end
exp1.answered?
exp1
exp1.answer = exp2
exp2.question
exp1.question
exp1.answer
exp2.answer
exp1.answered?
exp2.answered?
exp2
exp1
continue
exp1.to_json
Explanation.to_react(demand).first
Explanation.to_react(demand).class
Explanation.to_react(demand).size
Explanation.to_react(demand)
continue
Accreditation.verified.size
Accreditation.verified
continue
demand.explanations.map {|expl| expl.answered?}.count(false)
demand.explanations[1].answered?
demand.explanations[0].answered?
demand.explanations
demand
continue
exit
demand.explanations[1].answered?
demand.explanations.first.answered?
demand.explanations.map {|expl| expl.answered?}.any?
demand.have_explanations_without_answer?
demand.explanations
demand.explarations
demand
exit
user.supplier?
user.active_profile.accreditation.accept_as_supplier
user.active_profile
user.active_profile.accreditation.state
profile.accreditation.state
profile.
profile.accreditation.accept_as_supplier
user.active_profile_id = profile.id
profile = user.organization_account.organization_profiles.first
exit
user.organization_account.organization_profiles.first.accreditation.accept_as_supplier!
user.organization_account.organization_profiles.first.accreditation.accept_as_supplier
user.organization_account.organization_profiles.first.id
user.organization_account.organization_profiles.first.accreditation.state
user.organization_account.organization_profiles.first.accreditation.state = 'supplier'
user.organization_account.organization_profiles.first.accreditation.state
user.organization_account.organization_profiles.first
user.organization_account.organization_profiles
user.active_profile_id
user.active_account
exit
user.organization_account.organization_profiles
user.organization_account
exit
user.organization_account.organization_profiles
user.organization_account
user.profiles
user
continue
params[:demand][:competence_ids]
params[competence_ids]
params["competence_ids"]
params[:competence_ids]
params
params[:competence_ids]
continue
demand_params
continue
question_id
@demand.explanations
@demand.explanations.last
@demand.explanations.last.id
locals
continue
@demand.explanations.last.id
@demand.explanations.last
cnt
continue
@demand.explanations.last
@demand.explanations
@demand
current_user.customer?
cnt
co
current_user.active_profile.explanations.count
current_user.active_profile.explanations
cnt
continue
continue\
continue
@current_user
@explanation
continue
Explanation.new
continue
@explanation.class
@explanation.count
@explanation
continue
@explanation
@demand
continue
@explanation
@explanation.account
@explanation.first.demand
@explanation.demand
@explanation.account
@explanation
@current_user
continue
var instance
continue
debug
var instance
continue
var instance
var all
continue
